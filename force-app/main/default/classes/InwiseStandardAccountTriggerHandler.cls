public with sharing class InwiseStandardAccountTriggerHandler {
    public static String sCONST_RESUBSCRIBE = 'resubscribe';
    public static String sCONST_UNSUBSCRIBE = 'unsubscribe';
    static inwiseUtil objInwiseUtil;
    static{
        objInwiseUtil=new inwiseUtil(NULL);
    }
    public static void updateSubscription(list<Account> accList, Map<Id,Account> oldMap){
        List<Account> listToUnSubscribe = new List<Account>();
        List<Account> listToCancelUnSubscribe = new List<Account>();
        Map<Id,Boolean> mapOfContactForEmailProcess = new Map<Id,Boolean>();
        Map<Id,Boolean> mapOfContactForPhoneProcess = new Map<Id,Boolean>();
        for(Account acc : accList){
            if(objInwiseUtil.objInwiseSetting.Person_Account_Email_Opt_In_Out__c != null && acc.get(objInwiseUtil.objInwiseSetting.Person_Account_Email_Opt_In_Out__c) != null
                    && acc.get(objInwiseUtil.objInwiseSetting.Person_Account_Email_Opt_In_Out__c) != oldMap.get(acc.Id).get(objInwiseUtil.objInwiseSetting.Person_Account_Email_Opt_In_Out__c)){
                if(acc.get(objInwiseUtil.objInwiseSetting.Person_Account_Email_Opt_In_Out__c) == true){
                    listToUnSubscribe.add(acc);
                }
                if(acc.get(objInwiseUtil.objInwiseSetting.Person_Account_Email_Opt_In_Out__c) == false) {
                    listToCancelUnSubscribe.add(acc);
                }
                mapOfContactForEmailProcess.put(acc.Id,true);

            }
            if(objInwiseUtil.objInwiseSetting.Person_Account_Mobile_Opt_In_Out__c != null && acc.get(objInwiseUtil.objInwiseSetting.Person_Account_Mobile_Opt_In_Out__c) != null
                    && acc.get(objInwiseUtil.objInwiseSetting.Person_Account_Mobile_Opt_In_Out__c) != oldMap.get(acc.Id).get(objInwiseUtil.objInwiseSetting.Person_Account_Mobile_Opt_In_Out__c)){
                if(acc.get(objInwiseUtil.objInwiseSetting.Person_Account_Mobile_Opt_In_Out__c) == true){
                    listToUnSubscribe.add(acc);
                }
                if(acc.get(objInwiseUtil.objInwiseSetting.Person_Account_Mobile_Opt_In_Out__c) == false) {
                    listToCancelUnSubscribe.add(acc);
                }
                mapOfContactForPhoneProcess.put(acc.Id,true);

            }
        }
        if(!listToUnSubscribe.isEmpty()){
            doRecipientAction(listToUnSubscribe, sCONST_UNSUBSCRIBE,mapOfContactForEmailProcess,mapOfContactForPhoneProcess);
        }
        if(!listToCancelUnSubscribe.isEmpty()){
            doRecipientAction(listToCancelUnSubscribe, sCONST_RESUBSCRIBE,mapOfContactForEmailProcess,mapOfContactForPhoneProcess);
        }           
    }

    private static void doRecipientAction(List<Account> listToUnSubscribe,String soapAction, Map<Id,Boolean> mapOfContactForEmailChanges, Map<Id,Boolean> mapOfContactForPhoneChanges){

        List<String> listOfEmails = new  List<String>();
        List<String> listOfMobiles = new  List<String>();
        List<Account> listOfAccounts = new  List<Account>();
        if(Schema.sObjectType.Account.isAccessible() ){
            String sSelect = '';
            if(objInwiseUtil.objInwiseSetting.Person_Account_Email_Opt_In_Out_Field__c != null) {
                if (Schema.sObjectType.Account.fields.getMap().containsKey(objInwiseUtil.objInwiseSetting.Person_Account_Email_Opt_In_Out_Field__c) &&
                    Schema.sObjectType.Account.fields.getMap().get(objInwiseUtil.objInwiseSetting.Person_Account_Email_Opt_In_Out_Field__c).getDescribe().isAccessible()) {

                    sSelect += objInwiseUtil.objInwiseSetting.Person_Account_Email_Opt_In_Out_Field__c;
                }
            }
            if (Schema.sObjectType.Account.fields.getMap().containsKey(objInwiseUtil.objInwiseSetting.Person_Account_Mobile_Opt_In_Out_Field__c) &&
                Schema.sObjectType.Account.fields.getMap().get(objInwiseUtil.objInwiseSetting.Person_Account_Mobile_Opt_In_Out_Field__c).getDescribe().isAccessible()) {
                if(objInwiseUtil.objInwiseSetting.Person_Account_Mobile_Opt_In_Out_Field__c != null){
                    if(sSelect != ''){
                        sSelect += ',';
                    }
                    sSelect += objInwiseUtil.objInwiseSetting.Person_Account_Mobile_Opt_In_Out_Field__c;

                }
            }
            String sQuery = 'SELECT Id,' + sSelect + ' FROM Account where Id IN:listToUnSubscribe';
            listOfAccounts = Database.query(sQuery);
        }
            
        for(Account acc : listOfAccounts){
            if(objInwiseUtil.objInwiseSetting.Toggle_Email_Opt_in_Opt_out__c == true && objInwiseUtil.objInwiseSetting.Person_Account_Email_Opt_In_Out_Field__c != null && acc.get(objInwiseUtil.objInwiseSetting.Person_Account_Email_Opt_In_Out_Field__c) != null && mapOfContactForEmailChanges.get(acc.Id) == true){
                listOfEmails.add(String.valueOf(acc.get(objInwiseUtil.objInwiseSetting.Person_Account_Email_Opt_In_Out_Field__c)));
            }
            if(objInwiseUtil.objInwiseSetting.Toggle_Mobile_Opt_in_Opt_out__c == true && objInwiseUtil.objInwiseSetting.Person_Account_Mobile_Opt_In_Out_Field__c != null && acc.get(objInwiseUtil.objInwiseSetting.Person_Account_Mobile_Opt_In_Out_Field__c) != null && mapOfContactForPhoneChanges.get(acc.Id) == true){
                listOfMobiles.add(String.valueOf(acc.get(objInwiseUtil.objInwiseSetting.Person_Account_Mobile_Opt_In_Out_Field__c)));
            }
        }
        if(!listOfEmails.isEmpty() || !listOfMobiles.isEmpty()){
            doCalloutUnsubscribeOrCancel(listOfEmails, listOfMobiles, soapAction);
        }
    }

    @future (callout=true)
    public static void doCalloutUnsubscribeOrCancel(List<String> listOfEmails, List<String> listOfMobiles,  String restAPIAction){
         List<Logs__c> listOfLogs = new List<Logs__c>();
         InwiseUtil objInwiseUtil = new InwiseUtil(null);
         //String soapBody = '';
         HttpResponse res; 
         Http http = new Http();
         String endpoint = objInwiseUtil.apiUrl;
         endpoint +=  ('/rest/v1/contacts/' + restAPIAction); 
         HttpRequest req = objInwiseUtil.GetHTTPRequest('GET','application/json',endpoint); 
         req.setHeader('X-Api-Key',objInwiseUtil.inwiseAccountToken);     
         req.setBody(getJSONBody(listOfEmails,listOfMobiles, restAPIAction, objInwiseUtil));
         if(!Test.isRunningTest()){
               res = http.send(req);   
               listOfLogs.add(inwiseHttpUtil.getHttpLogRecord(req, res, ('/rest/v1/contacts/' + restAPIAction),'InwiseStandardAccountTriggerHandler','doCalloutUnsubscribeOrCancel'));               
         }else{
               String resBody = '{ "emails": [ { "email": "test101@domain.com", "status": "success" } ], "sms_mobile_numbers": [ { "sms_mobile_number": "string", "status": "invalid_mobile_number" } ] }';
               res = inwiseTestDataFactory.getDumpHttpResponse(resBody, 'application/json');
         }
         System.debug('size list of logs::-->>' + listOfLogs.size());
         if(objInwiseUtil.objInwiseSetting.Track_Logs__c && !listOfLogs.isEmpty()){
             insert listOfLogs;
         }              

    }
    public static String getJSONBody(List<String> listOfEmails, List<String> listOfMobiles,  String restAPIAction, InwiseUtil objInwiseUtil){
       String jsonBody = '';
       Integer sz = 1;
       if(restAPIAction == sCONST_RESUBSCRIBE){
             jsonBody += '{';
                 jsonBody += '"emails": [';
                  for(String s: listOfEmails){
                     jsonBody += '"'+ s +'"' + (listOfEmails.size() == sz ? '':',');
                     sz++;
                  } 
                           
                 jsonBody += '],';
                 sz = 1;
                 jsonBody += '"sms_mobile_numbers": [';
                   for(String s: listOfMobiles){
                       jsonBody += '"'+ inwiseHttpUtil.getFormattedPhone(s,objInwiseUtil) +'"' + (listOfMobiles.size() == sz ? '':',');
                       sz++;
                   }
                 jsonBody += ']';
             jsonBody += '}';
       }else if(restAPIAction == sCONST_UNSUBSCRIBE){
           jsonBody += '{';
                         sz = 1;
                         jsonBody += '"emails": [';
                             for(String s: listOfEmails){
                                       jsonBody += '{';
                                             jsonBody +=  '"email": "'+ s +'",';
                                             jsonBody += '"remark": ""';
                                       jsonBody += '}' + (listOfEmails.size() == sz ? '':',');
                                       sz++;
                              }         
                         jsonBody += '],';
                         sz = 1;
                         jsonBody += '"sms_mobile_numbers": [';
                              for(String s: listOfMobiles) {
                                  jsonBody += '{';
                                      jsonBody += '"mobile_number": "'+ inwiseHttpUtil.getFormattedPhone(s, objInwiseUtil) +'",';
                                      jsonBody += '"remark": ""';
                                  jsonBody += '}' + (listOfMobiles.size() == sz ? '':',');
                              }
                         jsonBody += ']';
           jsonBody += '}';
       }
       return jsonBody;

    }
}